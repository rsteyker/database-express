{"version":3,"sources":["app.js"],"names":["express","require","db","Users","cors","config","PORT","process","env","authenticate","then","console","log","err","error","sync","app","use","json","get","req","res","send","post","newUsers","body","create","status","findAll","attributes","users","id","params","findByPk","exclude","user","email","findOne","where","destroy","put","firstname","lastname","update","listen"],"mappings":"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","sourcesContent":["//Importamos express\r\nconst express = require(\"express\");\r\nconst db = require('./utils/database');\r\nconst Users = require('./models/users.model');\r\nconst cors = require('cors');\r\nrequire('dotenv').config();\r\n\r\nconst PORT  = process.env.PORT || 8000;\r\n\r\n\r\n// Creamos una instancia de express llamado app\r\n\r\n//Ejecutar el método authenticate\r\ndb.authenticate() //ES un método asincrono\r\n    .then(() => console.log('Base de datos conectada...'))\r\n    .catch(err => console.error(err));\r\n\r\ndb.sync() //Sincroniza el modelo con la bd\r\n  .then(() => console.log(\"bd sincronizada\"))\r\n  .catch(err => console.error(err))\r\n\r\nconst app = express();\r\n\r\n//Sirve para extraer datos en objeto en js\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"Servidor funcionando...\");\r\n});\r\n\r\n//Insertar Información en base de datos\r\napp.post('/users', async (req, res) => {\r\n    try {\r\n        //Extraemos el cuerpo de la petición\r\n        const newUsers = req.body;\r\n\r\n        //Crea los valores en la tabla de db\r\n        await Users.create(newUsers)\r\n\r\n        //Respondemos con un 201 - created\r\n        res.status(201).send();\r\n\r\n    } catch (error) {\r\n        res.status(404).json(error);\r\n    }\r\n});\r\n\r\n//Obtener a todos los asuarios de la base de datos\r\n//SELECT * FROM users;\r\napp.get('/users', async (req, res) => {\r\n    try {\r\n        const users = await Users.findAll({\r\n            //exclude: ['password]\r\n            attributes: ['firstname', 'lastname', 'email']\r\n        });\r\n        res.json(users)\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error)\r\n    }\r\n});\r\n\r\n//obtener usuario por su id\r\napp.get('/users/id/:id', async (req, res) => {\r\n    try {\r\n        //Para recuperar el parámetro de ruta\r\n        //req.params\r\n        const { id } = req.params;\r\n        //console.log(req.params);\r\n\r\n        const user = await Users.findByPk(id, {\r\n            attributes: {\r\n                exclude: ['password'],\r\n            }\r\n        });\r\n        res.json(user);\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error)\r\n    }\r\n});\r\n\r\n//Encontar a un usuario por algún otro dato\r\napp.get('/users/email/:email', async (req, res) => {\r\n    try {\r\n       const {email} = req.params;\r\n       const user = await Users.findOne({\r\n        where: {email},\r\n       });\r\n       res.json(user);\r\n        \r\n    } catch (error) {\r\n       res.status(400).json(error) \r\n    }\r\n});\r\n\r\n//Eliminar un usuario\r\n//DELETE * FROM users WHERE id=id\r\napp.delete(\"/users/:id\", async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        await Users.destroy({\r\n            where: { id }\r\n        });\r\n        res.status(204).send(); //Cuando eliminamos no enviamos respuesta\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Actualizar información de un usuario\r\n//UPDATE users SET firstname= '', lastname=''  WHERE id = id;\r\napp.put('/users/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { firstname, lastname } = req.body;\r\n        await Users.update({firstname, lastname}, {\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Dejar escuchando a nuestro servidor \r\napp.listen(PORT, () => {\r\n    console.log(`Servidor corriendo en el puerto ${PORT}`);\r\n});\r\n\r\nconsole.log(process.env);\r\n\r\n\r\n"],"file":"app.dev.js"}