{"version":3,"sources":["app.js"],"names":["express","require","db","cors","config","Users","env","PORT","authenticate","then","console","log","err","error","app","use","json","res","send","req","newUsers","regeneratorRuntime","async","_context","prev","next","body","awrap","create","status","t0","stop","findAll","attributes","users","_context2","get","id","user","_context3","params","findByPk","exclude","sent","email","_context4","findOne","where","_context5","destroy","_req$body","firstname","lastname","_context6","update","listen","concat","process"],"mappings":"aACA,IAAMA,QAAUC,QAAQ,WADxBC,GAAAD,QAAA,oBACMD,MAAUC,QAAQ,wBAGlBE,KAAOF,QAAQ,QAFrBA,QAAQ,UAAWG,SACnB,IAAMC,KAAQJ,QAAQK,IAAAC,MAAA,IAItBL,GAAAM,eAKAC,KAAA,WAAA,OAAAC,QAAAC,IAAA,gCALA,MAQW,SAAAC,GAAG,OAAIF,QAAQG,MAAMD,KAFhCV,GACKO,OAAKA,KAAA,WAAA,OAAMC,QAAYC,IAAA,qBAD5B,MAAA,SAAAC,GAEW,OAAAF,QAAAE,MAAGA,KAAA,IAFdE,IAAAd,UAKQc,IAAAC,IAAAZ,QAAAW,IADRC,IAAAf,QAESgB,QAETF,IAAMA,IAAG,IAAGd,SAAAA,EAAZiB,GAQIA,EAAIC,KAAK,6BAATD,IAAAA,KAAIC,SAAK,SAAAC,EAAAF,GAAA,IAAAG,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAIJJ,EAAUD,EAAAO,KAJNH,EAAAE,KAAA,EAAAJ,mBAAAM,MAIMtB,MAAAuB,OAAAR,IAJN,KAAA,EAIMH,EAAAY,OAAA,KAAAX,OAJNK,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,MAAA,GAgBLN,EAAIY,OAAO,KAAKb,KAAhBO,EAAAO,IAhBK,KAAA,GAAA,IAAA,MAAA,OAAAP,EAAAQ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAaLd,IAAAA,IAAAA,SAAIY,SAAJV,EAAAF,GAAIY,IAAAA,EAAAA,OAAAA,mBAAAA,MAAAA,SAAAA,GAAAA,OAAAA,OAAAA,EAAAA,KAAAA,EAAAA,MAAAA,KAAAA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,mBAAAA,MATOxB,MAAA2B,QAAA,CAAAC,WAAA,CAAA,YAAA,WAAA,YASPJ,KAAAA,EATOK,EASPL,EAAAA,KATOZ,EAAAD,KAAAkB,GASPL,EAAAA,KAAAA,GAAAA,MAAAA,KAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,EAAAA,MAAAA,GATOZ,EAAAY,OAAA,KAAAb,KAAAmB,EAAAL,IASPD,KAAAA,GAAAA,IAAAA,MAAAA,OAAAA,EAAAA,SAAAA,KAAAA,KAAAA,CAAAA,CAAAA,EAAAA,OATOf,IAAAsB,IAAA,gBAAA,SAAAjB,EAAAF,GAAA,IAAAoB,EAAAC,EAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAc,EAAAf,KAAA,EAkBnBa,EAAkBlB,EAAAqB,OAAlBH,GAlBmBE,EAAAd,KAAA,EAAAJ,mBAAAM,MAkBDtB,MAAAoC,SAAAJ,EAAA,CAAAJ,WAAA,CAAAS,QAAA,CAAA,gBAlBC,KAAA,EAkBDJ,EAlBCC,EAAAI,KAkBD1B,EAAAD,KAAAsB,GAlBCC,EAAAd,KAAA,GAAA,MAAA,KAAA,EAAAc,EAAAf,KAAA,EAAAe,EAAAT,GAAAS,EAAA,MAAA,GAoBuBtB,EAFxBY,OAAA,KAAAb,KAEwBuB,EAAAT,IApBvB,KAAA,GAAA,IAAA,MAAA,OAAAS,EAAAR,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAkBDjB,IAAAsB,IAAA,sBAAA,SAAAjB,EAAAF,GAAA,IAAA2B,EAAAN,EAAA,OAAAjB,mBAAAC,MAAA,SAAAuB,GAAA,OAAA,OAAAA,EAAArB,KAAAqB,EAAApB,MAAA,KAAA,EAAA,OAAAoB,EAAArB,KAAA,EAoCJoB,EAASzB,EAAIqB,OAAbI,MApCIC,EAAApB,KAAA,EAAAJ,mBAAAM,MAAAtB,MAAAyC,QAAA,CAAAC,MAAA,CAAAH,MAAAA,MAAA,KAAA,EAAAN,EAAAO,EAAAF,KASV1B,EAAAA,KAAIY,GATMgB,EAAApB,KAAA,GAAA,MAAA,KAAA,EAAAoB,EAAArB,KAAA,EAAAqB,EAAAf,GAAAe,EAAA,MAAA,GAAA5B,EAAAY,OAAA,KAAAb,KAAA6B,EAAAf,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAe,EAAAd,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAiDlBjB,IAAG,OAAQ,aAAc,SAAOK,EAAKF,GAAZ,IAAAoB,EAAA,OAAAhB,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAA,OAAAuB,EAAAxB,KAAA,EAnCAa,EAAAlB,EAAAqB,OAAAH,GAmCAW,EAAAvB,KAAA,EAAAJ,mBAAAM,MAnCAtB,MAAA4C,QAAA,CAAAF,MAAA,CAAAV,GAAAA,MAmCA,KAAA,EAnCApB,EAAAY,OAAA,KAAAX,OAmCA8B,EAAAvB,KAAA,GAAA,MAAA,KAAA,EAAAuB,EAAAxB,KAAA,EAAAwB,EAAAlB,GAAAkB,EAAA,MAAA,GAhCjB/B,EAAAY,OAAA,KAAAb,KAAAgC,EAAAlB,IAgCiB,KAAA,GAAA,IAAA,MAAA,OAAAkB,EAAAjB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA1BTW,IAAAA,IAAAA,aAAO,SAAGvB,EAADF,GAAF,IAAAoB,EAAAa,EAAAC,EAAAC,EAAA,OAAA/B,mBAAAC,MAAA,SAAA+B,GAAA,OAAA,OAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,KAAA,EAAA,OAAA4B,EAAA7B,KAAA,EATEa,EAAAlB,EAAAqB,OAAAH,GASFa,EA4CiB/B,EAAIO,KAA5ByB,EA5COD,EA4CPC,UAAWC,EA5CJF,EA4CIE,SA5CJC,EAAA5B,KAAA,EAAAJ,mBAAAM,MATEtB,MAAAiD,OAAA,CAAAH,UAAAA,EAAAC,SAAAA,GAAA,CAOXd,MAPW,CAAAD,GAAAA,MASF,KAAA,EATEpB,EAAAY,OAAA,KAAAX,OASFmC,EAAA5B,KAAA,GAAA,MAAA,KAAA,EAAA4B,EAAA7B,KAAA,EAAA6B,EAAAvB,GAAAuB,EAAA,MAAA,GATEpC,EAAAY,OAAA,KAAAb,KAAAqC,EAAAvB,IASF,KAAA,GAAA,IAAA,MAAA,OAAAuB,EAAAtB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OATEjB,IAAAyC,OAAAhD,KAAA,WAAAG,QAAAC,IAAA,mCAAA6C,OAAAjD,SAAAG,QAAAC,IAAA8C,QAAAnD","file":"app.min.js","sourcesContent":["//Importamos express\r\nconst express = require(\"express\");\r\nconst db = require('./utils/database');\r\nconst Users = require('./models/users.model');\r\nconst cors = require('cors');\r\nrequire('dotenv').config();\r\n\r\nconst PORT  = process.env.PORT || 8000;\r\n\r\n\r\n// Creamos una instancia de express llamado app\r\n\r\n//Ejecutar el método authenticate\r\ndb.authenticate() //ES un método asincrono\r\n    .then(() => console.log('Base de datos conectada...'))\r\n    .catch(err => console.error(err));\r\n\r\ndb.sync() //Sincroniza el modelo con la bd\r\n  .then(() => console.log(\"bd sincronizada\"))\r\n  .catch(err => console.error(err))\r\n\r\nconst app = express();\r\n\r\n//Sirve para extraer datos en objeto en js\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"Servidor funcionando...\");\r\n});\r\n\r\n//Insertar Información en base de datos\r\napp.post('/users', async (req, res) => {\r\n    try {\r\n        //Extraemos el cuerpo de la petición\r\n        const newUsers = req.body;\r\n\r\n        //Crea los valores en la tabla de db\r\n        await Users.create(newUsers)\r\n\r\n        //Respondemos con un 201 - created\r\n        res.status(201).send();\r\n\r\n    } catch (error) {\r\n        res.status(404).json(error);\r\n    }\r\n});\r\n\r\n//Obtener a todos los asuarios de la base de datos\r\n//SELECT * FROM users;\r\napp.get('/users', async (req, res) => {\r\n    try {\r\n        const users = await Users.findAll({\r\n            //exclude: ['password]\r\n            attributes: ['firstname', 'lastname', 'email']\r\n        });\r\n        res.json(users)\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error)\r\n    }\r\n});\r\n\r\n//obtener usuario por su id\r\napp.get('/users/id/:id', async (req, res) => {\r\n    try {\r\n        //Para recuperar el parámetro de ruta\r\n        //req.params\r\n        const { id } = req.params;\r\n        //console.log(req.params);\r\n\r\n        const user = await Users.findByPk(id, {\r\n            attributes: {\r\n                exclude: ['password'],\r\n            }\r\n        });\r\n        res.json(user);\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error)\r\n    }\r\n});\r\n\r\n//Encontar a un usuario por algún otro dato\r\napp.get('/users/email/:email', async (req, res) => {\r\n    try {\r\n       const {email} = req.params;\r\n       const user = await Users.findOne({\r\n        where: {email},\r\n       });\r\n       res.json(user);\r\n        \r\n    } catch (error) {\r\n       res.status(400).json(error) \r\n    }\r\n});\r\n\r\n//Eliminar un usuario\r\n//DELETE * FROM users WHERE id=id\r\napp.delete(\"/users/:id\", async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        await Users.destroy({\r\n            where: { id }\r\n        });\r\n        res.status(204).send(); //Cuando eliminamos no enviamos respuesta\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Actualizar información de un usuario\r\n//UPDATE users SET firstname= '', lastname=''  WHERE id = id;\r\napp.put('/users/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { firstname, lastname } = req.body;\r\n        await Users.update({firstname, lastname}, {\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Dejar escuchando a nuestro servidor \r\napp.listen(PORT, () => {\r\n    console.log(`Servidor corriendo en el puerto ${PORT}`);\r\n});\r\n\r\nconsole.log(process.env);\r\n\r\n\r\n"]}