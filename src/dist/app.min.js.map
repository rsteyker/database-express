{"version":3,"sources":["app.js"],"names":["express","require","db","config","PORT","process","env","authenticate","then","console","log","error","err","sync","app","use","json","res","send","post","req","newUsers","regeneratorRuntime","async","_context","prev","next","body","awrap","Users","create","status","t0","stop","get","users","_context2","findAll","attributes","sent","id","user","_context3","params","findByPk","exclude","email","_context4","findOne","where","_context5","destroy","put","_req$body","firstname","lastname","_context6","update","listen","concat"],"mappings":"aACA,IAAMA,QAAUC,QAAQ,WADxBC,GAAAD,QAAA,oBACMD,MAAUC,QAAQ,wBAGxBA,QAAQ,UAAUE,SAElB,IAAMC,KAAQC,QAAQC,IAAIF,MAAQ,IAKlCF,GAAAK,eAEKC,KAAK,WAAA,OAAMC,QAAQC,IAAI,gCAF5B,MACGH,SAAAA,GAAAA,OAAeE,QAAAE,MAAAC,KACRV,GAAAW,OADVL,KAAA,WAAA,OAEWC,QAAAG,IAAG,qBADJ,MACQH,SAAAA,GAAAA,OAAOA,QAAOG,MAAlBA,KAEdV,IAAGW,IAAOb,UACFc,IADRC,IAAAf,QAESgB,QAETF,IAAMA,IAAG,IAAGd,SAAAA,EAAZiB,GAOIA,EAAIC,KAAK,6BACZJ,IAEDK,KAAA,SAAA,SAAAC,EAAAH,GAAA,IAAAI,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EACmBJ,EAAAD,EAAAO,KADnBH,EAAAE,KAAA,EAAAJ,mBAAAM,MACmBC,MAAAC,OAAAT,IADnB,KAAA,EAGQJ,EAAAc,OAAA,KAAAb,OAHRM,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAQ,GAAAR,EAAA,MAAA,GACmBP,EAAAc,OAAA,KAAAf,KAAAQ,EAAAQ,IADnB,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAS,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OACmBnB,IAAAoB,IAAA,SAAA,SAAAd,EAAAH,GAAA,IAAAkB,EAAA,OAAAb,mBAAAC,MAAA,SAAAa,GAAA,OAAA,OAAAA,EAAAX,KAAAW,EAAAV,MAAA,KAAA,EAAA,OAAAU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAAAJ,mBAAAM,MAoBSC,MAAMQ,QAAQ,CApBvBC,WAAA,CAAA,YAAA,WAAA,YAAA,KAAA,EAoBLH,EApBKC,EAAAG,KAYXtB,EAAAA,KAAIc,GAZOK,EAAAV,KAAA,GAAA,MAAA,KAAA,EAAAU,EAAAX,KAAA,EAAAW,EAAAJ,GAAAI,EAAA,MAAA,GAAAnB,EAAAc,OAAA,KAAAf,KAAAoB,EAAAJ,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAI,EAAAH,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAnB,IAgBnBoB,IAAA,gBAAA,SAAAd,EAAAH,GAAA,IAAAuB,EAAAC,EAAA,OAAAnB,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,KAAA,EAAA,OAAAgB,EAAAjB,KAAA,EAEkBe,EAAApB,EAAAuB,OAAAH,GAFlBE,EAAAhB,KAAA,EAAAJ,mBAAAM,MAEkBC,MAAAe,SAAAJ,EAAA,CAAAF,WAAA,CAAAO,QAAA,CAAA,gBAFlB,KAAA,EAEkBJ,EAFlBC,EAAAH,KAKYtB,EAAAD,KAAAyB,GALZC,EAAAhB,KAAA,GAAA,MAAA,KAAA,EAAAgB,EAAAjB,KAAA,EAAAiB,EAAAV,GAAAU,EAAA,MAAA,GA+BQzB,EAAIc,OAAO,KAAKf,KAAhB0B,EAAAV,IA/BR,KAAA,GAAA,IAAA,MAAA,OAAAU,EAAAT,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAEkBnB,IAAAoB,IAAA,sBAAA,SAAAd,EAAAH,GAAA,IAAA6B,EAAAL,EAAA,OAAAnB,mBAAAC,MAAA,SAAAwB,GAAA,OAAA,OAAAA,EAAAtB,KAAAsB,EAAArB,MAAA,KAAA,EAAA,OAAAqB,EAAAtB,KAAA,EAAAqB,EAAA1B,EAAAuB,OAAAG,MAAAC,EAAArB,KAAA,EAAAJ,mBAAAM,MAAAC,MAAAmB,QAAA,CAAAC,MAAA,CAAAH,MAAAA,MAAA,KAAA,EAAAL,EAAAM,EAAAR,KAwCXtB,EAAID,KAAKyB,GAxCEM,EAAArB,KAAA,GAAA,MAAA,KAAA,EAAAqB,EAAAtB,KAAA,EAAAsB,EAAAf,GAAAe,EAAA,MAAA,GAAA9B,EAAAc,OAAA,KAAAf,KAAA+B,EAAAf,IAAA,KAAA,GAAA,IAAA,MAAA,OAAAe,EAAAd,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAclBnB,IAAG,OAAK,aAAiB,SAAAM,EAAAH,GAAA,IAAAuB,EAAA,OAAAlB,mBAAAC,MAAA,SAAA2B,GAAA,OAAA,OAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,KAAA,EAAA,OAAAwB,EAAAzB,KAAA,EAAAe,EAAApB,EAAAuB,OAAAH,GAAAU,EAAAxB,KAAA,EAAAJ,mBAAAM,MAAAC,MAAAsB,QAAA,CAAAF,MAAA,CAAAT,GAAAA,MAAA,KAAA,EAAAvB,EAAAc,OAAA,KAAAb,OAAAgC,EAAAxB,KAAA,GAAA,MAAA,KAAA,EAAAwB,EAAAzB,KAAA,EAAAyB,EAAAlB,GAAAkB,EAAA,MAAA,GAITV,EAJST,OAIEY,KAAAA,KAAXH,EAAAA,IAJS,KAAA,GAAA,IAAA,MAAA,OAAAU,EAAAjB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAQDnB,IAAAsC,IAAA,aAAA,SAAAhC,EAAAH,GAAA,IAAAuB,EAAAa,EAAAC,EAAAC,EAAA,OAAAjC,mBAAAC,MAAA,SAAAiC,GAAA,OAAA,OAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,KAAA,EAAA,OAAA8B,EAAA/B,KAAA,EA4CRe,EAAOpB,EAAIuB,OAAXH,GA5CQa,EARCjC,EAAAO,KAAA2B,EAQDD,EARCC,UAAAC,EAQDF,EARCE,SAQDC,EAAA9B,KAAA,EAAAJ,mBAAAM,MARCC,MAAA4B,OAAA,CAAAH,UAAAA,EAAAC,SAAAA,GAAA,CAYjBtC,MAASwB,CAAAA,GAAAA,MAJO,KAAA,EARCxB,EAAAc,OAAA,KAAAb,OAQDsC,EAAA9B,KAAA,GAAA,MAAA,KAAA,EAAA8B,EAAA/B,KAAA,EAAA+B,EAAAxB,GAAAwB,EAAA,MAAA,GARCvC,EAAAc,OAAA,KAAAf,KAAAwC,EAAAxB,IAQD,KAAA,GAAA,IAAA,MAAA,OAAAwB,EAAAvB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OARCnB,IAAA4C,OAAAtD,KAAA,WAAAK,QAAAC,IAAA,mCAAAiD,OAAAvD,SAAAK,QAAAC,IAAAL,QAAAC","file":"app.min.js","sourcesContent":["//Importamos express\r\nconst express = require(\"express\");\r\nconst db = require('./utils/database');\r\nconst Users = require('./models/users.model');\r\nrequire('dotenv').config();\r\n\r\nconst PORT  = process.env.PORT || 8000;\r\n\r\n\r\n// Creamos una instancia de express llamado app\r\n\r\n//Ejecutar el método authenticate\r\ndb.authenticate() //ES un método asincrono\r\n    .then(() => console.log('Base de datos conectada...'))\r\n    .catch(err => console.error(err));\r\n\r\ndb.sync() //Sincroniza el modelo con la bd\r\n  .then(() => console.log(\"bd sincronizada\"))\r\n  .catch(err => console.error(err))\r\n\r\nconst app = express();\r\n\r\n//Sirve para extraer datos en objeto en js\r\napp.use(express.json());\r\n\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"Servidor funcionando...\");\r\n});\r\n\r\n//Insertar Información en base de datos\r\napp.post('/users', async (req, res) => {\r\n    try {\r\n        //Extraemos el cuerpo de la petición\r\n        const newUsers = req.body;\r\n\r\n        //Crea los valores en la tabla de db\r\n        await Users.create(newUsers)\r\n\r\n        //Respondemos con un 201 - created\r\n        res.status(201).send();\r\n\r\n    } catch (error) {\r\n        res.status(404).json(error);\r\n    }\r\n});\r\n\r\n//Obtener a todos los asuarios de la base de datos\r\n//SELECT * FROM users;\r\napp.get('/users', async (req, res) => {\r\n    try {\r\n        const users = await Users.findAll({\r\n            //exclude: ['password]\r\n            attributes: ['firstname', 'lastname', 'email']\r\n        });\r\n        res.json(users)\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error)\r\n    }\r\n});\r\n\r\n//obtener usuario por su id\r\napp.get('/users/id/:id', async (req, res) => {\r\n    try {\r\n        //Para recuperar el parámetro de ruta\r\n        //req.params\r\n        const { id } = req.params;\r\n        //console.log(req.params);\r\n\r\n        const user = await Users.findByPk(id, {\r\n            attributes: {\r\n                exclude: ['password'],\r\n            }\r\n        });\r\n        res.json(user);\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error)\r\n    }\r\n});\r\n\r\n//Encontar a un usuario por algún otro dato\r\napp.get('/users/email/:email', async (req, res) => {\r\n    try {\r\n       const {email} = req.params;\r\n       const user = await Users.findOne({\r\n        where: {email},\r\n       });\r\n       res.json(user);\r\n        \r\n    } catch (error) {\r\n       res.status(400).json(error) \r\n    }\r\n});\r\n\r\n//Eliminar un usuario\r\n//DELETE * FROM users WHERE id=id\r\napp.delete(\"/users/:id\", async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        await Users.destroy({\r\n            where: { id }\r\n        });\r\n        res.status(204).send(); //Cuando eliminamos no enviamos respuesta\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Actualizar información de un usuario\r\n//UPDATE users SET firstname= '', lastname=''  WHERE id = id;\r\napp.put('/users/:id', async (req, res) => {\r\n    try {\r\n        const { id } = req.params;\r\n        const { firstname, lastname } = req.body;\r\n        await Users.update({firstname, lastname}, {\r\n            where: { id }\r\n        });\r\n        res.status(204).send();\r\n\r\n    } catch (error) {\r\n        res.status(400).json(error);\r\n    }\r\n});\r\n\r\n//Dejar escuchando a nuestro servidor \r\napp.listen(PORT, () => {\r\n    console.log(`Servidor corriendo en el puerto ${PORT}`);\r\n});\r\n\r\nconsole.log(process.env);\r\n\r\n\r\n"]}